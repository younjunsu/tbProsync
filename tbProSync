#!/bin/bash

# ProSync Name  (User Setting)
PROSYNC_SYNC_NAME="A3->B3"
# SOURCE DB/USR
SOURCE_DB_USER=sys
SOURCE_DB_PASS=tibero
# SOURCE/TARGET 구성
SOURCE_MODE=TAC
TARGET_MODE=TAC
# ProSync HOME PATH ($PRS_HOME)
PROSYNC_HOME=
# ProSync Topology ID
PROSYNC_TOP_ID=prosync_sync
# ProSync SOURCE/TARGET 유저
PROSYNC_SOURCE_USER=sys
PROSYNC_TARGET_USER=sys
# ProSync TARGET DB LINK
PROSYNC_TARGET_DBLINK=p_target
#####################################################################################
function_error_check(){
       ERROR_FLAG=N
       function_error_list(){
              error_source_connect_check(){
ERROR_SOURCE_CONNECT=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
select 'CONN' from dual;
EOF`
                     ERROR_SOURCE_CONNECT_CHECK=`echo ${ERROR_SOURCE_CONNECT[@]} |grep -v TBR |grep -o "CONN"`

                     if [ -z "${SOURCE_DB_USER}" ] || [ -z "${SOURCE_DB_PASS}" ]
                     then
                            ERROR_FLAG=Y
                     elif [ "CONN" != "${ERROR_SOURCE_CONNECT_CHECK}" ]
                     then
                            ERROR_FLAG=Y
                            echo "  ERROR - Source Connection Checking."
                            echo "    - Not Connected"
                     elif [ "CONN" = "${ERROR_SOURCE_CONNECT_CHECK}" ]
                     then
                            echo "  SUCCESS - Source Connection Checking."
                            echo "    - Connected"
                     fi
              }


              error_target_dblink_check(){
ERROR_TARGET_DBLINK_CONNECT=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
select 'CONN' from dual@${PROSYNC_TARGET_DBLINK};
EOF`
                     ERROR_TARGET_DBLINK_CONNECT_CHECK=`echo ${ERROR_TARGET_DBLINK_CONNECT[@]} |grep -v TBR |grep -o "CONN"`
                     if [ -z "${SOURCE_DB_USER}" ] || [ -z "${SOURCE_DB_PASS}" ]
                     then
                            ERROR_FLAG=Y
                     elif [ "CONN" != "${ERROR_TARGET_DBLINK_CONNECT_CHECK}" ]
                     then
                            ERROR_FLAG=Y
                            echo "  ERROR - Target Connection Checking."
                            echo "    - Not Connected"
                     elif [ "CONN" = "${ERROR_TARGET_DBLINK_CONNECT_CHECK}" ]
                     then
                            echo "  SUCCESS - Target Connection Checking."
                            echo "    - Connected"
                     fi
              }

              error_source_tsn_check(){
ERROR_SOURCE_TSN=$(tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
select 'CONN' from v\$database;
EOF
)
                     ERROR_SOURCE_TSN_CHECK=`echo ${ERROR_SOURCE_TSN[@]} |grep -v TBR |grep -o "CONN"`
                     if [ -z "${SOURCE_DB_USER}" ] || [ -z "${SOURCE_DB_PASS}" ]
                     then
                            ERROR_FLAG=Y
                     elif [ "CONN" != "${ERROR_SOURCE_TSN_CHECK}" ]
                     then
                            ERROR_FLAG=Y
                            echo "  ERROR - Source TSN Checking."
                            echo "    - Not Connected"
                     elif [ "CONN" = "${ERROR_SOURCE_TSN_CHECK}" ]
                     then
                            echo "  SUCCESS - Source TSN Checking."
                            echo "    - Connected"
                     fi
              }
              
              error_target_tsn_check(){
ERROR_TARGET_TSN=$(tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
select 'CONN' from ${PROSYNC_TARGET_USER}.prs_lct@${PROSYNC_TARGET_DBLINK};
EOF
)
                     ERROR_TARGET_TSN_CHECK=`echo ${ERROR_TARGET_TSN[@]} |grep -v TBR |grep -o "CONN"`
                     if [ -z "${SOURCE_DB_USER}" ] || [ -z "${SOURCE_DB_PASS}" ]
                     then
                            ERROR_FLAG=Y
                     elif [ "CONN" != "${ERROR_TARGET_TSN_CHECK}" ]
                     then
                            ERROR_FLAG=Y
                            echo "  ERROR - Target TSN Checking."
                            echo "    - Not Connected"
                     elif [ "CONN" = "${ERROR_TARGET_TSN_CHECK}" ]
                     then
                            echo "  SUCCESS - Target TSN Checking."
                            echo "    - Connected"
                     fi                     
              }

              error_sciprt_parameter_check(){
                     : "${SOURCE_DB_USER:?SOURCE_DB_USER is not set}"
                     : "${SOURCE_DB_PASS:?SOURCE_DB_PASS is not set}"
                     : "${SOURCE_MODE:?SOURCE_MODE is not set}"
                     : "${TARGET_MODE:?TARGET_MODE is not set}"
                     : "${PROSYNC_SYNC_NAME:?PROSYNC_SYNC_NAME is not set}"
                     #: "${PROSYNC_HOME:?PROSYNC_HOME is not set}"
                     : "${PROSYNC_TOP_ID:?PROSYNC_TOP_ID is not set}"
                     : "${PROSYNC_SOURCE_USER:?PROSYNC_SOURCE_USER is not set}"
                     : "${PROSYNC_TARGET_USER:?PROSYNC_TARGET_USER is not set}"
                     #: "${PROSYNC_SOURCE_DBLINK:?PROSYNC_SOURCE_DBLINK is not set}"
                     : "${PROSYNC_TARGET_DBLINK:?PROSYNC_TARGET_DBLINK is not set}"              
                     echo "   - Script Parameter - SOURCE_DB_USER: ${SOURCE_DB_USER}"s
                     echo "   - Script Parameter - SOURCE_DB_PASS: ${SOURCE_DB_PASS}"
                     echo "   - Script Parameter - SOURCE_MODE: ${SOURCE_MODE}"
                     echo "   - Script Parameter - TARGET_MODE: ${TARGET_MODE}"
                     echo "   - Script Parameter - PROSYNC_SYNC_NAME: ${PROSYNC_SYNC_NAME}"
                     echo "   - Script Parameter - PROSYNC_HOME: ${PROSYNC_HOME}"
                     echo "   - Script Parameter - PROSYNC_TOP_ID: ${PROSYNC_TOP_ID}"
                     echo "   - Script Parameter - PROSYNC_SOURCE_USER: ${PROSYNC_SOURCE_USER}"
                     echo "   - Script Parameter - PROSYNC_TARGET_USER: ${PROSYNC_TARGET_USER}"
                     echo "   - Script Parameter - PROSYNC_SOURCE_DBLINK: ${PROSYNC_SOURCE_DBLINK}"
                     echo "   - Script Parameter - PROSYNC_TARGET_DBLINK: ${PROSYNC_TARGET_DBLINK}"
              }

              
       }

       funciton_config_error_check(){
              function_error_list
              error_sciprt_parameter_check
              error_source_connect_check
              error_target_dblink_check
              error_source_tsn_check
              error_target_tsn_check
       }


       function_pmap_error_check(){
              echo "pmap error"
       }

       funciton_pmon_error_check(){
              function_error_list
              error_sciprt_parameter_check
              error_source_connect_check
              error_target_dblink_check
              error_source_tsn_check
              error_target_tsn_check
       }

       function_plog_error_check(){
              echo "plog error"
       }

       case ${TBPROSYNC_MODE} in
              "check")
                     funciton_config_error_check
              ;;     
              "pmap")
                     function_pmap_error_check
              ;;
              "pmon")
                     funciton_pmon_error_check
              ;;
              "plog")
                     function_plog_error_check
              ;;
              *)
                     echo " ERROR "
              ;;              
       esac

       if [ "Y" == "${ERROR_FLAG}" ]
       then
              exit 0
       fi              
}


function_check()
{
       clear
       echo " tbProSync Configuration Check"
       printf "************************************************************************************************************\n"
       printf " Configuration Checking for Script\n"
       printf "************************************************************************************************************\n"
}

function_pmap(){
       echo "function_pmap"
}

function_pmon(){
# 소스 
SOURCE_DATE_TSN=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
SELECT
'success'||','||
to_char(sysdate,'YYYY/MM/DD HH24:MI:SS')||','||
TRUNC((CAST(sysdate as date) - TO_DATE('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) * 86400)||','||
current_tsn as source_date_tsn
FROM 
v\\$database;
EOF`


# 타겟 
TARGET_DATE_TSN=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
select
'success'||','||
to_char(time,'YYYY/MM/DD HH24:MI:SS')||','||
TRUNC((CAST(time as date) - TO_DATE('1970-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS')) * 86400)||','||
tsn as target_date_tsn
from \${PROSYNC_TARGET_USER}.prs_lct@\${PROSYNC_TARGET_DBLINK};
EOF`

PROSYNC_CURRENT_TIME=`echo ${SOURCE_DATE_TSN} |awk -F , '{print $2}'`
PROSYNC_SOURCE_TIME=`echo ${SOURCE_DATE_TSN} |awk -F , '{print $2}'`
PROSYNC_SOURCE_UNIX_TIME=`echo ${SOURCE_DATE_TSN} |awk -F , '{print $3}'`
PROSYNC_SOURCE_TSN=`echo ${SOURCE_DATE_TSN} |awk -F , '{print $4}'`
PROSYNC_TARGET_TIME=`echo ${TARGET_DATE_TSN} |awk -F , '{print $2}'`
PROSYNC_TARGET_UNIX_TIME=`echo ${TARGET_DATE_TSN} |awk -F , '{print $3}'`
PROSYNC_TARGET_TSN=`echo ${TARGET_DATE_TSN} |awk -F , '{print $4}'`
PROSYNC_UNIX_TIME_GAP=$((PROSYNC_SOURCE_UNIX_TIME - PROSYNC_TARGET_UNIX_TIME))
PROSYNC_HOURS_TIME_GAP=$((PROSYNC_UNIX_TIME_GAP / 3600))  # 시간
PROSYNC_MINUTES_TIME_GAP=$(((PROSYNC_UNIX_TIME_GAP % 3600) / 60))  # 분
PROSYNC_SECONDS_TIME_GAP=$((PROSYNC_UNIX_TIME_GAP % 60))  # 초
PROSYNC_TSN_GAP=$((PROSYNC_SOURCE_TSN - PROSYNC_TARGET_TSN))



TARGET_DELAY_ARCHIVE=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
set linesize 1000
select
'seq='||sequence#||', thread='||thread#||', begine_tsn='||first_change#||', end_tsn='||next_change#||', filename='||substr(name,instr(name,'/',-1)+1) as archive
from v\\$archived_log
where 
(
first_change# >= (select tsn from \${PROSYNC_TARGET_USER}.prs_lct@\${PROSYNC_TARGET_DBLINK}) and 
next_change# >= (select tsn from \${PROSYNC_TARGET_USER}.prs_lct@\${PROSYNC_TARGET_DBLINK})
) or
(
first_change# <= (select tsn from \${PROSYNC_TARGET_USER}.prs_lct@\${PROSYNC_TARGET_DBLINK}) and 
next_change# >= (select tsn from \${PROSYNC_TARGET_USER}.prs_lct@\${PROSYNC_TARGET_DBLINK})
)
order by sequence#
;
EOF
`


TARGET_DELAY_ARCHIVE_TOTAL_COUNT=`echo "${TARGET_DELAY_ARCHIVE[@]}" | awk '{for (i=1; i<=NF; i++) printf $i (i%5==0 ? "\n" : " ")}' |wc -l`
TARGET_DELAY_ARCHIVE_HEAD=`echo ${TARGET_DELAY_ARCHIVE[@]} | awk '{for (i=1; i<=NF; i++) printf $i (i%5==0 ? "\n" : " ")}' |awk '{print "   - "$0}' |head -n 1`
TARGET_DELAY_ARCHIVE_TAIL=`echo ${TARGET_DELAY_ARCHIVE[@]} | awk '{for (i=1; i<=NF; i++) printf $i (i%5==0 ? "\n" : " ")}' |awk '{print "   - "$0}' |tail -n 1`

if [ ${TARGET_DELAY_ARCHIVE_TOTAL_COUNT} -le 1 ]; then
       TARGET_DELAY_ARCHIVE_SKIP_COUNT="0"
       TARGET_DELAY_ARCHIVE_TAIL=
elif [ ${TARGET_DELAY_ARCHIVE_TOTAL_COUNT} -le 2 ]; then
       TARGET_DELAY_ARCHIVE_SKIP_COUNT="0"
elif [ ${TARGET_DELAY_ARCHIVE_TOTAL_COUNT} -gt 2 ]; then
       TARGET_DELAY_ARCHIVE_SKIP_COUNT=$((TARGET_DELAY_ARCHIVE_TOTAL_COUNT - 2))
else
       TARGET_DELAY_ARCHIVE_SKIP_COUNT="error"
fi

PROSYNC_LOG_TABLE_COUNT=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
set linesize 1000
select count(*) from dba_log_groups;
EOF
`
PROSYNC_SYNC_TABLE_COUNT=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
set linesize 1000
select count(*) from \${PROSYNC_TARGET_USER}.prs_obj_list@\${PROSYNC_TARGET_DBLINK};
EOF
`
PROSYNC_LOG_SYNC_TABLE_GAP=`tbsql ${SOURCE_DB_USER}/${SOURCE_DB_PASS} -s <<EOF
set pagesize 0
set feedback off
set linesize 1000
select count(*) from dba_log_groups dlg, \${PROSYNC_TARGET_USER}.prs_obj_list@\${PROSYNC_TARGET_DBLINK} pol
where dlg.owner=pol.owner and dlg.table_name=pol.name;
EOF
`

clear
echo "##############################################"
echo "## ProSync Name: ${PROSYNC_SYNC_NAME} (TOP_ID: ${PROSYNC_TOP_ID})"
echo "##############################################"
echo ""
if [ -z ${PMON_INTERVAL} ]; then
echo " ProSync Monitor"
else 
echo " ProSync Monitor (Interval ${PMON_INTERVAL} sec)"
fi
uptime |awk '{print "  "$0}'
printf "\n"
printf "************************************************************************************************************\n"
printf " SOURCE/TARGET TSN\n"
printf "************************************************************************************************************\n"
printf "  %-30s %-30s %-30s\n" "SOURCE(${SOURCE_MODE})" "TARGET(${TARGET_MODE})" "TSN GAP/CURRENT TIME"
printf " %-30s %-30s %-30s\n" "------------------" "------------------" "------------------------------------------"
printf "  %-30s %-30s %-30s\n" "${PROSYNC_SOURCE_USER}" "${PROSYNC_TARGET_USER}" "GAP: ${PROSYNC_TSN_GAP} (CUR: ${PROSYNC_CURRENT_TIME})"
printf "\n"
printf "************************************************************************************************************\n"
printf " SOURCE/TARGET TIME\n"
printf "************************************************************************************************************\n"
printf "   - SOURCE TSN: %-10d         (Apply Time:%20s)\n" "$PROSYNC_SOURCE_TSN" "$PROSYNC_SOURCE_TIME"
printf "   - TARGET TSN: %-10d         (Apply Time:%20s)\n" "$PROSYNC_TARGET_TSN" "$PROSYNC_TARGET_TIME"
printf "   - TSN    GAP: %d(%d/%d)\n" "$PROSYNC_TSN_GAP" "${PROSYNC_TARGET_TSN}" "${PROSYNC_SOURCE_TSN}"
printf "   - TIME   GAP: %d hours, %d minutes, %d seconds\n" "$PROSYNC_HOURS_TIME_GAP" "$PROSYNC_MINUTES_TIME_GAP" "$PROSYNC_SECONDS_TIME_GAP"
printf "\n"
printf "************************************************************************************************************\n"
printf " SOURCE/TARGET ARCHVE GAP\n"
printf "************************************************************************************************************\n"
echo "   * Delay Archive Count: ${TARGET_DELAY_ARCHIVE_TOTAL_COUNT}"
echo "  -------------------------------------------------"
echo "${TARGET_DELAY_ARCHIVE_HEAD}"
echo "              ... skip (${TARGET_DELAY_ARCHIVE_SKIP_COUNT}) ..."
echo "${TARGET_DELAY_ARCHIVE_TAIL}"
printf "\n"
printf "************************************************************************************************************\n"
printf " SOURCE/TARGET Sync Object GAP \n"
printf "************************************************************************************************************\n"
printf "  %-30s %-30s %-30s\n" "ProSync" "LOG Group" "GAP"
printf " %-30s %-30s %-30s\n" "------------------" "------------------" "------------------"
printf "  %-30s %-30s %-30s\n" "${PROSYNC_LOG_TABLE_COUNT}" "${PROSYNC_SYNC_TABLE_COUNT}" "${PROSYNC_LOG_SYNC_TABLE_GAP}"
printf "\n"
printf "\n"
printf "\n"
printf "\n"
}

function_plog(){
       echo "function_plog"
}

function_help(){
       echo "Usage: ./tbProsync [OPTION1] [OPTION2]"
       echo ""
       echo "  tbProSync Configuration Checking"
       echo ""
       echo "    ./tbProsync check   # Setting Checking "
       echo ""       
       # echo "  (Not Yet) ProSync MAP"
       # echo ""
       # echo "    ./tbProsync pmap # ProSync Map"
       # echo ""
       echo "  ProSync TSN SYNC Monitoring"
       echo ""
       echo "    ./tbProsync pmon   # Runs Once "
       echo "    ./tbProsync pmon 5 # Batch mode, input interval"
       echo ""
       # echo "  (Not Yet) ProSync Trouble Monitoring"
       # echo ""
       # echo "    ./tbProsync plog"
       # echo ""
       echo "For more information, Github URL: https://github.com/younjunsu/tbProsync "
       echo ""
}

TBPROSYNC_OPTION1=$1
TBPROSYNC_OPTION2=$2
case ${TBPROSYNC_OPTION1} in
       "check")
              TBPROSYNC_MODE="check"
              function_check
              function_error_check
       ;;
       "pmap")
              TBPROSYNC_MODE="pmap"
              # function_error_check
              # function_pmap
       ;;
       "pmon")
              TBPROSYNC_MODE="pmon"
              function_error_check
              if [ -z "${TBPROSYNC_OPTION2}" ]; then
                     function_pmon
              else
                     PMON_INTERVAL=${TBPROSYNC_OPTION2}
                     while true; do
                            function_pmon
                            sleep ${PMON_INTERVAL}
                     done
              fi             
       ;;
       "plog")
              TBPROSYNC_MODE="plog"
              # function_error_check
              # function_plog
       ;;
       *)
              function_help
       ;;
esac
